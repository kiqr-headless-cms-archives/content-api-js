/* tslint:disable */
/* eslint-disable */
/**
 * Content API
 * Content API for KIQR Headless CMS
 *
 * The version of the OpenAPI document: 0.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Document
 */
export interface Document {
    /**
     * 
     * @type {string}
     * @memberof Document
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Document
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Document
     */
    slug: string;
    /**
     * 
     * @type {string}
     * @memberof Document
     */
    contentType: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof Document
     */
    content: { [key: string]: string; };
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof Document
     */
    relations?: { [key: string]: object; };
    /**
     * 
     * @type {Date}
     * @memberof Document
     */
    updatedAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Document
     */
    createdAt: Date;
}

/**
 * Check if a given object implements the Document interface.
 */
export function instanceOfDocument(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "slug" in value;
    isInstance = isInstance && "contentType" in value;
    isInstance = isInstance && "content" in value;
    isInstance = isInstance && "updatedAt" in value;
    isInstance = isInstance && "createdAt" in value;

    return isInstance;
}

export function DocumentFromJSON(json: any): Document {
    return DocumentFromJSONTyped(json, false);
}

export function DocumentFromJSONTyped(json: any, ignoreDiscriminator: boolean): Document {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'slug': json['slug'],
        'contentType': json['contentType'],
        'content': json['content'],
        'relations': !exists(json, 'relations') ? undefined : json['relations'],
        'updatedAt': (new Date(json['updatedAt'])),
        'createdAt': (new Date(json['createdAt'])),
    };
}

export function DocumentToJSON(value?: Document | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'slug': value.slug,
        'contentType': value.contentType,
        'content': value.content,
        'relations': value.relations,
        'updatedAt': (value.updatedAt.toISOString()),
        'createdAt': (value.createdAt.toISOString()),
    };
}

